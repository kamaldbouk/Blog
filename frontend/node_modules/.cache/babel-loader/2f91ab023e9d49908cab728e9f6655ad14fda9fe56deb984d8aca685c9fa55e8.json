{"ast":null,"code":"var _s = $RefreshSig$();\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        // Log response and result for debugging\n        console.error('Login response:', result);\n        throw new Error(result.error || 'Login failed');\n      }\n      localStorage.setItem('user', JSON.stringify(result));\n      dispatch({\n        type: 'LOGIN',\n        payload: result\n      });\n      return result;\n    } catch (err) {\n      console.error('Login error:', err.message); // Log error message for debugging\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n\n// export const useLogin = () => {\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { dispatch } = useAuthContext();\n\n//   const login = async (email, password) => {\n//     setIsLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await fetch('/api/users/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       const result = await response.json();\n\n//       if (!response.ok) {\n//         throw new Error(result.message || 'Login failed');\n//       }\n\n//       localStorage.setItem('user', JSON.stringify(result));\n//       dispatch({ type: 'LOGIN', payload: result });\n\n//       return result;\n\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return { login, isLoading, error };\n// };\n_s(useLogin, \"leglVsSbW4DJnC7nVdCyJFB0GD8=\", true);","map":{"version":3,"names":["useLogin","_s","error","setError","useState","isLoading","setIsLoading","dispatch","useAuthContext","login","email","password","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","Error","localStorage","setItem","type","payload","err","message"],"sources":["/Users/kamaldbouk/Desktop/blog/frontend/src/hooks/useLogin.js"],"sourcesContent":["export const useLogin = () => {\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { dispatch } = useAuthContext();\n\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        // Log response and result for debugging\n        console.error('Login response:', result);\n        throw new Error(result.error || 'Login failed');\n      }\n\n      localStorage.setItem('user', JSON.stringify(result));\n      dispatch({ type: 'LOGIN', payload: result });\n\n      return result;\n\n    } catch (err) {\n      console.error('Login error:', err.message); // Log error message for debugging\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return { login, isLoading, error };\n};\n\n// export const useLogin = () => {\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { dispatch } = useAuthContext();\n\n//   const login = async (email, password) => {\n//     setIsLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await fetch('/api/users/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       const result = await response.json();\n\n//       if (!response.ok) {\n//         throw new Error(result.message || 'Login failed');\n//       }\n\n//       localStorage.setItem('user', JSON.stringify(result));\n//       dispatch({ type: 'LOGIN', payload: result });\n\n//       return result;\n\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return { login, isLoading, error };\n// };\n"],"mappings":";AAAA,OAAO,MAAMA,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEG;EAAS,CAAC,GAAGC,cAAc,CAAC,CAAC;EAErC,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCL,YAAY,CAAC,IAAI,CAAC;IAClBH,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAEpC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB;QACAC,OAAO,CAACpB,KAAK,CAAC,iBAAiB,EAAEiB,MAAM,CAAC;QACxC,MAAM,IAAII,KAAK,CAACJ,MAAM,CAACjB,KAAK,IAAI,cAAc,CAAC;MACjD;MAEAsB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAER,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC;MACpDZ,QAAQ,CAAC;QAAEmB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAER;MAAO,CAAC,CAAC;MAE5C,OAAOA,MAAM;IAEf,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZN,OAAO,CAACpB,KAAK,CAAC,cAAc,EAAE0B,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAC5C1B,QAAQ,CAACyB,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEG,KAAK;IAAEJ,SAAS;IAAEH;EAAM,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAD,EAAA,CA3EaD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}